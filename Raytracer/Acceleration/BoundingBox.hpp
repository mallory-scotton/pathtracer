///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <cmath>
#include <algorithm>
#include <limits>
#include "Config.hpp"
#include "Maths/Mat4x4.hpp"
#include "Maths/Vec2.hpp"
#include "Maths/Vec3.hpp"
#include "Maths/Vec4.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
struct BoundingBox
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Vec3f min;      //<!
    Vec3f max;      //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    BoundingBox(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param point
    ///
    ///////////////////////////////////////////////////////////////////////////
    BoundingBox(const Vec3f& point);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param point1
    /// \param point2
    ///
    ///////////////////////////////////////////////////////////////////////////
    BoundingBox(const Vec3f& point1, const Vec3f& point2);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec3f& operator[](Uint64 index);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const Vec3f& operator[](Uint64 index) const;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec3f Center(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec3f Extents(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param point
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool Contains(const Vec3f& point) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int MaxDimension(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    float SurfaceArea(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param point
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Grow(const Vec3f& point);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param box
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Grow(const BoundingBox& box);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param a
    /// \param b
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static BoundingBox Union(const BoundingBox& a, const BoundingBox& b);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param a
    /// \param b
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static BoundingBox Intersection(
        const BoundingBox& a,
        const BoundingBox& b
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param a
    /// \param b
    /// \param result
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Intersects(
        const BoundingBox& a,
        const BoundingBox& b,
        BoundingBox& result
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param a
    /// \param b
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool Contains(const BoundingBox& a, const BoundingBox& b);
};

} // namespace Ray
