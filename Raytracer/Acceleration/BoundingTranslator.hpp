///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <map>
#include "Objects/Instance.hpp"
#include "Interfaces/IObject.hpp"
#include "Acceleration/BoundingHierarchy.hpp"


///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class BoundingTranslator
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    struct Node
    {
        Vec3f bboxmin;      //<!
        Vec3f bboxmax;      //<!
        Vec3f LRLeaf;       //<!
    };
    int topLevelIndex;
    std::vector<Node> nodes;
    int nodeTexWidth;

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    int curNode;
    int curTriIndex;
    std::vector<int> bvhRootStartIndices;
    std::vector<Instance> meshInstances;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    BoundingTranslator();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~BoundingTranslator();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////


public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ProcessBLAS(std::vector<UniquePtr<IObject>>& meshes);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ProcessTLAS(const BoundingHierarchy& topLevelBvh);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param topLevelBvh
    /// \param instances
    ///
    ///////////////////////////////////////////////////////////////////////////
    void UpdateTLAS(const BoundingHierarchy& topLevelBvh,
        const std::vector<Ray::Instance>& instances);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param topLevelBvh
    /// \param meshes
    /// \param instances
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Process(const BoundingHierarchy& topLevelBvh,
        std::vector<UniquePtr<IObject>>& objects,
        const std::vector<Ray::Instance>& instances);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param nodeIdx
    /// \param bvh
    ///
    ///////////////////////////////////////////////////////////////////////////
    int ProcessBLASNodes(int nodeIdx, const BoundingHierarchy& bvh);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param nodeIdx
    /// \param bvh
    ///
    ///////////////////////////////////////////////////////////////////////////
    int ProcessTLASNodes(int nodeIdx, const BoundingHierarchy& bvh);
};

}  // namespace Ray
