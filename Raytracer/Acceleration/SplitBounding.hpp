///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Acceleration/BoundingHierarchy.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class SplitBounding : public BoundingHierarchy
{
private:
    int m_max_split_depth;          //<!
    float m_min_overlap;            //<!
    float m_extra_refs_budget;      //<!
    int m_num_nodes_required;       //<!
    int m_num_nodes_for_regular;    //<!
    int m_num_nodes_archived;       //<!
    std::list<std::vector<Node>> m_node_archive;        //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    struct PrimRef
    {
        BoundingBox bounds;
        Vec3f center;
        int idx;
    };

    typedef std::vector<PrimRef> PrimRefArray;
    enum class SplitType { kObject, kSpatial };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param traversal_cost
    /// \param num_bins
    /// \param max_split_depth
    /// \param min_overlap
    /// \param extra_refs_budget
    ///
    ///////////////////////////////////////////////////////////////////////////
    SplitBounding(float traversal_cost, int num_bins, int max_split_depth,
             float min_overlap, float extra_refs_budget);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~SplitBounding();

protected:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param bounds
    /// \param numbounds
    ///
    ///////////////////////////////////////////////////////////////////////////
    void BuildImpl(const std::vector<BoundingBox>& bounds, int numbounds) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param req
    /// \param primerefs
    ///
    ///////////////////////////////////////////////////////////////////////////
    void BuildNode(SplitRequest& req, PrimRefArray primrefs);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param req
    /// \param refs
    ///
    ///////////////////////////////////////////////////////////////////////////
    SahSplit FindObjectSahSplit(const SplitRequest& req,
                                const PrimRefArray refs) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param req
    /// \param refs
    ///
    ///////////////////////////////////////////////////////////////////////////
    SahSplit FindSpatialSahSplit(const SplitRequest& req,
                                 const PrimRefArray refs) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param split
    /// \param req
    /// \param refs
    /// \param extra_refs
    ///
    ///////////////////////////////////////////////////////////////////////////
    int SplitPrimRefs(const SahSplit& split, const SplitRequest& req,
                       PrimRefArray refs);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param ref
    /// \param axis
    /// \param split
    /// \param leftref
    /// \param rightref
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool SplitPrimRef(const PrimRef& ref, int axis, float split,
                      PrimRef& leftref, PrimRef& rightref) const;

protected:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int AllocateNode() override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param maximum
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitNodeAllocator(size_t maxnum) override;
};

}  // namespace Ray
