///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <atomic>
#include <iostream>
#include <list>
#include <memory>
#include <vector>
#include "Acceleration/BoundingBox.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class BoundingHierarchy
{
public:
protected:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    enum NodeType { kInternal, kLeaf }; //<!
    struct Node {
        BoundingBox bounds;
        NodeType type;
        int index;
        union {
            struct {
                Node* lc;
                Node* rc;
            };
            struct {
                int startidx;
                int numprims;
            };
        };
    };

    struct SplitRequest {
        int startidx;                   //<!
        int numprims;                   //<!
        Node** ptr;                     //<!
        BoundingBox bounds;             //<!
        BoundingBox centroid_bounds;    //<!
        int level;                      //<!
        int index;                      //<!
    };
    struct SahSplit {
        int dim;                        //<!
        float split;                    //<!
        float sah;                      //<!
        float overlap;                  //<!
    };
    std::vector<Node> m_nodes;          //<!
    std::vector<int> m_indices;         //<!
    std::atomic<int> m_nodecnt;         //<!
    std::vector<int> m_packed_indices;  //<!
    BoundingBox m_bounds;               //<!
    Node* m_root;                       //<!
    bool m_usesah;                      //<!
    int m_height;                       //<!
    float m_traversal_cost;             //<!
    int m_num_bins;                     //<!

public:

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param traversal_cost
    /// \param num_bins
    /// \param usesah
    ///
    ///////////////////////////////////////////////////////////////////////////
    BoundingHierarchy(float traversal_cost, int num_bins = 64, bool usesah = false);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~BoundingHierarchy();

public:

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    BoundingBox const& Bounds() const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param bounds
    /// \param numbounds
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Build(BoundingBox const* bounds, int numbounds);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int GetHeight() const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual int const* GetIndices() const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual size_t GetNumIndices() const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param v
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool is_nan(float v) const;

protected:

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param bounds
    /// \param numbounds
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void BuildImpl(BoundingBox const* bounds, int numbounds);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Node& AllocateNode();

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param maximum
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void InitNodeAllocator(size_t maxnum);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param req
    /// \param bounds
    /// \param centroids
    /// \param primindices
    ///
    ///////////////////////////////////////////////////////////////////////////
    void BuildNode(SplitRequest const& req, BoundingBox const* bounds,
                   Vec3f const* centroids, int* primindices);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param req
    /// \param bounds
    /// \param centroids
    /// \param primindices
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    SahSplit FindSahSplit(SplitRequest const& req, BoundingBox const* bounds,
        Vec3f const* centroids, int* primindices) const;
};

}  // namespace Ray
