///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Maths/Vec2.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
template <typename T>
Vec2<T>::Vec2(void)
    : x(static_cast<T>(0))
    , y(static_cast<T>(0))
{}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
Vec2<T>::Vec2(const T& all)
    : x(all)
    , y(all)
{}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
Vec2<T>::Vec2(const T& x, const T& y)
    : x(x)
    , y(y)
{}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
template <typename U>
Vec2<T>::Vec2(const Vec2<U>& other)
    : x(static_cast<T>(other.x))
    , y(static_cast<T>(other.y))
{}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
Vec2<T>::Vec2(const sf::Vector2<T>& other)
    : x(other.x)
    , y(other.y)
{}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
Vec2<T>::operator sf::Vector2<T>(void) const
{
    return (sf::Vector2(x, y));
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
Vec2<T> operator*(const Vec2<T>& lhs, const Vec2<T>& rhs)
{
    return (Vec2<T>(lhs.x * rhs.x, lhs.y * rhs.y));
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
std::ostream& operator<<(std::ostream& os, const Vec2<T>& vec)
{
    os << '(' << vec.x << ", " << vec.y << ')';
    return (os);
}

} // namespace Ray
