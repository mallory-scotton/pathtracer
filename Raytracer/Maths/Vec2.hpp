///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"
#include <SFML/System/Vector2.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
///////////////////////////////////////////////////////////////////////////////
template <typename T>
class Vec2
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    union
    {
        struct
        {
            T x;            //<!
            T y;            //<!
        };
        T data[2];          //<!
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param all
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2(const T& all);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param x
    /// \param y
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2(const T& x, const T& y);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename U>
    Vec2(const Vec2<U>& other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2(const sf::Vector2<T>& other);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    operator sf::Vector2<T>(void) const;
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template <typename T>
Vec2<T> operator*(const Vec2<T>& lhs, const Vec2<T>& rhs);

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \param os
/// \param vec
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template <typename T>
std::ostream& operator<<(std::ostream& os, const Vec2<T>& vec);

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
using Vec2i = Vec2<int>;
using Vec2u = Vec2<unsigned int>;
using Vec2f = Vec2<float>;
using Vec2d = Vec2<double>;

} // namespace Ray

///////////////////////////////////////////////////////////////////////////////
// Implementation
///////////////////////////////////////////////////////////////////////////////
#include "Maths/Vec2.inl"
