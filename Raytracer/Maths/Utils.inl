///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Maths/Constants.hpp"
#include "Maths/Utils.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
template <typename T>
T Math::Min(const T& a, const T& b)
{
    return (a < b ? a : b);
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
T Math::Min(const T& a, const T& b, const T& c)
{
    return (Min(Min(a, b), c));
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
T Math::Max(const T& a, const T& b)
{
    return (a > b ? a : b);
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
T Math::Max(const T& a, const T& b, const T& c)
{
    return (Max(Max(a, b), c));
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
T Math::Clamp(const T& value, const T& min, const T& max)
{
    return (Min(Max(value, min), max));
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
T Math::Degrees(const T& radians)
{
    return (radians * (static_cast<T>(180) / static_cast<T>(PI)));
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
T Math::Radians(const T& degrees)
{
    return (degrees * (static_cast<T>(PI) / static_cast<T>(180)));
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
T Math::IsNaN(T value)
{
    return (value != value);
}

} // namespace Ray
