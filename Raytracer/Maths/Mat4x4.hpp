///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"
#include "Maths/Quaternion.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
///////////////////////////////////////////////////////////////////////////////
template <typename T>
class Mat4x4
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    T data[4][4];

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Mat4x4(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    T (&operator[](Uint64 index))[4];

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param index
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const T (&operator[](Uint64 index) const)[4];

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param quaternion
    ///
    ///////////////////////////////////////////////////////////////////////////
    static Mat4x4<T> QuaternionToMatrix(const Quaternion<T>& quaternion);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param translation
    ///
    ///////////////////////////////////////////////////////////////////////////
    static Mat4x4<T> Translate(const Vec3<T>& translation);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param scale
    ///
    ///////////////////////////////////////////////////////////////////////////
    static Mat4x4<T> Scale(const Vec3<T>& scale);
};

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
/// \param lhs
/// \param rhs
///
/// \return
///
///////////////////////////////////////////////////////////////////////////////
template <typename T>
Mat4x4<T> operator*(const Mat4x4<T>& lhs, const Mat4x4<T>& rhs);

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
using Mat4x4i = Mat4x4<int>;
using Mat4x4u = Mat4x4<unsigned int>;
using Mat4x4f = Mat4x4<float>;
using Mat4x4d = Mat4x4<double>;

} // namespace Ray

///////////////////////////////////////////////////////////////////////////////
// Implementation
///////////////////////////////////////////////////////////////////////////////
#include "Maths/Mat4x4.inl"
