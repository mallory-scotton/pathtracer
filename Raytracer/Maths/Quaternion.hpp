///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Maths/Vec4.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
/// \tparam T
///
///////////////////////////////////////////////////////////////////////////////
template <typename T>
class Quaternion
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    union
    {
        struct
        {
            T x;        //<!
            T y;        //<!
            T z;        //<!
            T w;        //<!
        };
        T data[4];      //<!
    };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Quaternion(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Quaternion(const T& x, const T& y, const T& z, const T& w);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param vector
    ///
    ///////////////////////////////////////////////////////////////////////////
    Quaternion(const Vec4<T>& vector);
};

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
using Quaternioni = Quaternion<int>;
using Quaternionu = Quaternion<unsigned int>;
using Quaternionf = Quaternion<float>;
using Quaterniond = Quaternion<double>;

} // namespace Ray

///////////////////////////////////////////////////////////////////////////////
// Implementation
///////////////////////////////////////////////////////////////////////////////
#include "Maths/Quaternion.inl"
