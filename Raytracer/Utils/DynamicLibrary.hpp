///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class DynamicLibrary
{
private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct LibDeleter
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param handle
        ///
        ///////////////////////////////////////////////////////////////////////
        void operator()(void* handle) const;
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    UniquePtr<void, LibDeleter> m_handle;       //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param path
    ///
    ///////////////////////////////////////////////////////////////////////////
    explicit DynamicLibrary(const Path& path);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    DynamicLibrary(const DynamicLibrary&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    DynamicLibrary(DynamicLibrary&&) = default;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~DynamicLibrary() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    DynamicLibrary& operator=(const DynamicLibrary&) = delete;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    DynamicLibrary& operator=(DynamicLibrary&&) = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    template <typename T, typename... Ts>
    Function<T(Ts...)> GetSymbol(const String& name) const;
};

} // namespace Ray

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
#include "Utils/DynamicLibrary.inl"
