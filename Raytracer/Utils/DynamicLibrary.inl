///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/DynamicLibrary.hpp"
#include "Errors/Exception.hpp"
#include <dlfcn.h>

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
template <typename T, typename... Ts>
Function<T(Ts...)> DynamicLibrary::GetSymbol(const String& name) const
{
    dlerror();

    void* symbol = dlsym(m_handle.get(), name.c_str());

    const char* error = dlerror();

    if (error)
    {
        throw Exception("Failed to get symbol '" + name + "': " + error);
    }

    using FuncPtrType = T(*)(Ts...);
    FuncPtrType funcPtr = reinterpret_cast<FuncPtrType>(symbol);

    return (Function<T(Ts...)>(funcPtr));
}

} // namespace Ray
