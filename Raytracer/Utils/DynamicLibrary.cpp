///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Utils/DynamicLibrary.hpp"
#include "Errors/Exception.hpp"
#include <dlfcn.h>

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
void DynamicLibrary::LibDeleter::operator()(void* handle) const
{
    if (handle)
    {
        dlclose(handle);
    }
}

///////////////////////////////////////////////////////////////////////////////
DynamicLibrary::DynamicLibrary(const Path& path)
{
    RAY_TRACE("Loading Library: " << path);

    dlerror();

    m_handle.reset(dlopen(path.c_str(), RTLD_LAZY | RTLD_GLOBAL));

    if (!m_handle)
    {
        throw Exception(
            "Failed to load library " + path.string() + ": " + dlerror()
        );
    }
}

} // namespace Ray
