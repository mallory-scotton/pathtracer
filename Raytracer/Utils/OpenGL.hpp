///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class OpenGL
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void UseProgram(GLuint program);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void StopUsingProgram(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CreateProgram(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CreateProgram(GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shaders
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CreateProgram(const Vector<GLuint>& shaders);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DeleteProgram(GLuint& program);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shader
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void AttachShader(GLuint program, GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shaders
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void AttachShaders(GLuint program, const Vector<GLuint>& shaders);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shader
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DetachShader(GLuint program, GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shaders
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DetachShaders(GLuint program, const Vector<GLuint>& shaders);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void LinkProgram(GLuint program);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shader
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void LinkProgram(GLuint program, GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shaders
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void LinkProgram(GLuint program, const Vector<GLuint>& shaders);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLint GetProgramLinkStatus(GLuint program);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static String GetProgramInfoLog(GLuint program);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DeleteShader(GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shaders
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DeleteShaders(const Vector<GLuint>& shaders);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param uniform
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLint GetUniformLocation(GLuint program, const String& uniform);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLuint location, float a);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLuint location, int a);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    /// \param b
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLuint location, float a, float b);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    /// \param b
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLuint location, int a, int b);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    /// \param b
    /// \param c
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLuint location, float a, float b, float c);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    /// \param b
    /// \param c
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLuint location, int a, int b, int c);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shaderType
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CreateShader(GLuint shaderType);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param source
    /// \param shaderType
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CreateShader(const String& source, GLuint shaderType);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    /// \param source
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void ShaderSource(GLuint shader, const String& source);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLint CompileShader(GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLint GetShaderCompileStatus(GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static String GetShaderInfoLog(GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void BindFramebuffer(GLuint fbo);
};

} // namespace Ray
