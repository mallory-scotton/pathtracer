///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"
#include "Maths/Vec2.hpp"
#include "Maths/Vec4.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class OpenGL
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class Object
    {
    protected:
        ///////////////////////////////////////////////////////////////////////
        //
        ///////////////////////////////////////////////////////////////////////
        GLuint m_handler;

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        Object(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param handler
        ///
        ///////////////////////////////////////////////////////////////////////
        Object(GLuint handler);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param other
        ///
        ///////////////////////////////////////////////////////////////////////
        Object(Object&& other) noexcept;

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        Object(const Object&) = delete;

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param other
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        Object& operator=(Object&& other) noexcept;

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        Object& operator=(const Object&) = delete;

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        operator GLuint(void) const;

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \return
        ///
        ///////////////////////////////////////////////////////////////////////
        GLuint GetHandler(void) const;
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class Buffer : public OpenGL::Object
    {
    private:
        ///////////////////////////////////////////////////////////////////////
        //
        ///////////////////////////////////////////////////////////////////////
        GLenum m_target;        //<!

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param target
        ///
        ///////////////////////////////////////////////////////////////////////
        Buffer(GLenum target);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        ~Buffer();

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void Bind(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void Unbind(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void SetData(GLsizeiptr size, const void* data, GLenum usage);
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class VertexArray : public OpenGL::Object
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        VertexArray(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        ~VertexArray();

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void Bind(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void Unbind(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param mode
        /// \param first
        /// \param count
        ///
        ///////////////////////////////////////////////////////////////////////
        void Draw(GLenum mode, int first, int count);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        ///
        ///////////////////////////////////////////////////////////////////////
        void EnableVertexAttribArray(GLuint index);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param index
        /// \param size
        /// \param type
        /// \param noramlized
        /// \param stride
        /// \param pointer
        ///
        ///////////////////////////////////////////////////////////////////////
        void VertexAttribPointer(
            GLuint index,
            GLint size,
            GLenum type,
            GLboolean normalized,
            GLsizei stride,
            const void* pointer
        );
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class Texture : public OpenGL::Object
    {
    protected:
        ///////////////////////////////////////////////////////////////////////
        //
        ///////////////////////////////////////////////////////////////////////
        GLenum m_target;        //<!

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param target
        ///
        ///////////////////////////////////////////////////////////////////////
        Texture(GLenum target);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        ~Texture();

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param texture
        ///
        ///////////////////////////////////////////////////////////////////////
        static void Active(GLenum texture);

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void Bind(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        void Unbind(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param parameter
        /// \param value
        ///
        ///////////////////////////////////////////////////////////////////////
        void SetParameter(GLenum parameter, GLint value);
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class Texture2D : public OpenGL::Texture
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        Texture2D(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        virtual ~Texture2D() = default;
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class Texture2DArray : public OpenGL::Texture
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        Texture2DArray(void);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        virtual ~Texture2DArray() = default;
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class TextureBuffer : public OpenGL::Texture
    {
    private:
        ///////////////////////////////////////////////////////////////////////
        //
        ///////////////////////////////////////////////////////////////////////
        GLenum m_format;        //<!

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        /// \param buffer
        /// \param format
        ///
        ///////////////////////////////////////////////////////////////////////
        TextureBuffer(UniquePtr<Buffer>& buffer, GLenum format);

        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        virtual ~TextureBuffer() = default;
    };

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class FrameBuffer
    {

    };

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void UseProgram(GLuint program);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void StopUsingProgram(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CreateProgram(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CreateProgram(GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shaders
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CreateProgram(const Vector<GLuint>& shaders);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DeleteProgram(GLuint& program);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shader
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void AttachShader(GLuint program, GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shaders
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void AttachShaders(GLuint program, const Vector<GLuint>& shaders);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shader
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DetachShader(GLuint program, GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shaders
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DetachShaders(GLuint program, const Vector<GLuint>& shaders);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void LinkProgram(GLuint program);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shader
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void LinkProgram(GLuint program, GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param shaders
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void LinkProgram(GLuint program, const Vector<GLuint>& shaders);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLint GetProgramLinkStatus(GLuint program);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static String GetProgramInfoLog(GLuint program);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DeleteShader(GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shaders
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void DeleteShaders(const Vector<GLuint>& shaders);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param program
    /// \param uniform
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLint GetUniformLocation(GLuint program, const String& uniform);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLint location, float a);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLint location, int a);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    /// \param b
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLint location, float a, float b);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    /// \param b
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLint location, int a, int b);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    /// \param b
    /// \param c
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLint location, float a, float b, float c);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param location
    /// \param a
    /// \param b
    /// \param c
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Uniform(GLint location, int a, int b, int c);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shaderType
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CreateShader(GLuint shaderType);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param source
    /// \param shaderType
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CreateShader(const String& source, GLuint shaderType);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    /// \param source
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void ShaderSource(GLuint shader, const String& source);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLint CompileShader(GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLint GetShaderCompileStatus(GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static String GetShaderInfoLog(GLuint shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void BindFramebuffer(GLuint fbo);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param mask
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Clear(GLbitfield mask);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param color
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Clear(const Vec4f& color);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param r
    /// \param g
    /// \param b
    /// \param a
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Clear(float r, float g, float b, float a = 1.f);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param mask
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Disable(GLenum cap);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param x
    /// \param y
    /// \param width
    /// \param height
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Viewport(int x, int y, int width, int height);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param position
    /// \param dimension
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void Viewport(const Vec2i& position, const Vec2i& dimension);
};

} // namespace Ray
