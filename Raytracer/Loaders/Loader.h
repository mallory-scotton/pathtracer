///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"
#include "Components/Scene.h"
#include "Utils/LibConfig.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
class Scene;

///////////////////////////////////////////////////////////////////////////////
// FIXME: TO REMOVE
bool LoadSceneFromFile(const std::string& filename, Scene* scene,
                       RenderOptions& renderOptions);

///////////////////////////////////////////////////////////////////////////////
class Loader
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param cfg
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void ParseSceneMaterial(const LibConfig::Setting& cfg);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param cfg
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void ParseSceneRendererOptions(const LibConfig::Setting& cfg);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param cfg
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void ParseSceneCamera(const LibConfig::Setting& cfg, Scene* scene);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param cfg
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void ParseSceneLight(const LibConfig::Setting& cfg);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param cfg
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void ParseSceneMesh(const LibConfig::Setting& cfg);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param cfg
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void ParseSceneGLTF(const LibConfig::Setting& cfg);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param filename
    /// \param scene
    /// \param options
    ///
    ///////////////////////////////////////////////////////////////////////////
    static bool LoadScene(
        const Path& filename,
        Scene* scene,
        RenderOptions& options
    );
};

}  // namespace Ray
