///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#ifdef RAY_CUSTOM_CONFIG
    #include RAY_CUSTOM_CONFIG
#endif

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "GL/gl3w.h"

///////////////////////////////////////////////////////////////////////////////
// Windows
///////////////////////////////////////////////////////////////////////////////
#if defined(_WIN32)
    #define WIN32_LEAN_AND_MEAN 1
    #include <Windows.h>
    #undef min
    #undef max
#endif

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
#define RAY_MAJOR_VERSION 1
#define RAY_MINOR_VERSION 0
#define RAY_PATCH_VERSION 0

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
#define RAY_EXIT_SUCCESS 0
#define RAY_EXIT_FAILURE 84

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
#ifndef RAY_ASSERT
    #include <cassert>
    #define RAY_ASSERT(_EXPR, _MSG) assert((_EXPR) && _MSG);
#endif

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
#ifdef RAY_DEBUG
    #include <iostream>
    #define RAY_LOG(_MSG) std::cout \
        << "\033[90m â›¯ RAY \033[0m" \
        << _MSG << std::endl
    #define RAY_INFO(_MSG) std::cout \
        << "\033[90m â›¯ RAY \033[0m" \
        << "\033[46m ðŸ›ˆ INFO     \033[0m \033[36m" \
        << _MSG << "\033[0m" << std::endl
    #define RAY_WARN(_MSG) std::cout \
        << "\033[90m â›¯ RAY \033[0m" \
        << "\033[43m âš  WARNING  \033[0m \033[33m" \
        << _MSG << "\033[0m" << std::endl
    #define RAY_ERROR(_MSG) std::cerr \
        << "\033[90m â›¯ RAY \033[0m" \
        << "\033[101m âœ˜ ERROR    \033[0m \033[91m" \
        << _MSG << "\033[0m" << std::endl
    #define RAY_FATAL(_MSG) std::cerr \
        << "\033[90m â›¯ RAY \033[0m" \
        << "\033[41m ðŸ•± FATAL    \033[0m \033[31m" \
        << _MSG << "\033[0m" << std::endl
    #define RAY_TRACE(_MSG) std::cout \
        << "\033[90m â›¯ RAY \033[0m" \
        << "\033[45m á¨€ TRACE    \033[0m \033[35m" \
        << _MSG << "\033[0m" << std::endl
    #define RAY_SUCCESS(_MSG) std::cout \
        << "\033[90m â›¯ RAY \033[0m" \
        << "\033[42m âœ” SUCCESS  \033[0m \033[32m" \
        << _MSG << "\033[0m" << std::endl
#else
    #define RAY_LOG(_MSG)
    #define RAY_INFO(_MSG)
    #define RAY_WARN(_MSG)
    #define RAY_ERROR(_MSG)
    #define RAY_FATAL(_MSG)
    #define RAY_TRACE(_MSG)
    #define RAY_SUCCESS(_MSG)
#endif

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
#define RAY_UNUSED(_PARAMS) (void)(_PARAMS)

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
#include "Config/Types.hpp"
#include "Config/Errors.hpp"
