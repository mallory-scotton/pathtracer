///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Objects/AObject.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

AObject::AObject(void)
    : m_bvh(std::make_unique<Ray::SplitBvh>(2.0f, 64, 0, 0.001f, 0))
{}

///////////////////////////////////////////////////////////////////////////////
const Vector<Vec4f>& AObject::GetVertices(void) const
{
    return (m_vertices);
}

///////////////////////////////////////////////////////////////////////////////
const Vector<Vec4f>& AObject::GetNormals(void) const
{
    return (m_normals);
}

///////////////////////////////////////////////////////////////////////////////
const UniquePtr<Bvh>& AObject::GetBVH(void) const
{
    return (m_bvh);
}

///////////////////////////////////////////////////////////////////////////////
const String& AObject::GetName(void) const
{
    return (m_name);
}

///////////////////////////////////////////////////////////////////////////////
void AObject::BuildBVH(void)
{
    const Uint64 count = m_vertices.size() / 3;
    Vector<BoundingBox> bounds(count);

    for (Uint64 i = 0; i < count; i++)
    {
        const Vec3f v1 = Vec3f(m_vertices[i * 3 + 0]);
        const Vec3f v2 = Vec3f(m_vertices[i * 3 + 1]);
        const Vec3f v3 = Vec3f(m_vertices[i * 3 + 2]);

        bounds[i].Grow(v1);
        bounds[i].Grow(v2);
        bounds[i].Grow(v3);
    }

    // TODO: Fix this function to use the Vector<BoundingBox> instead of a ptr
    m_bvh->Build(&bounds[0], count);
}

///////////////////////////////////////////////////////////////////////////////
void AObject::PushVertex(const Vec4f& vertex)
{
    m_vertices.push_back(vertex);
}

///////////////////////////////////////////////////////////////////////////////
void AObject::PushNormal(const Vec4f& normal)
{
    m_normals.push_back(normal);
}

///////////////////////////////////////////////////////////////////////////////
void AObject::SetName(const String& name)
{
    m_name = name;
}

} // namespace Ray
