///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Interfaces/IObject.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class AObject : public IObject
{
protected:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Vector<Vec4f> m_vertices;       //<!
    Vector<Vec4f> m_normals;        //<!
    UniquePtr<Bvh> m_bvh;           //<!
    String m_name;                  //<!
    String m_hash;                  //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    AObject(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~AObject() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const Vector<Vec4f>& GetVertices(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const Vector<Vec4f>& GetNormals(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const UniquePtr<Bvh>& GetBVH(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const String& GetName(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void BuildBVH(void) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param vertex
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void PushVertex(const Vec4f& vertex) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param normal
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void PushNormal(const Vec4f& normal) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void SetName(const String& name) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual const String& GetHash(void) const override;
};

} // namespace Ray
