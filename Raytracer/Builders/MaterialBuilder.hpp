///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"
#include "Interfaces/IBuilder.hpp"
#include "Components/Material.hpp"
#include "Utils/LibConfig.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class MaterialBuilder : public IBuilder<Material>
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~MaterialBuilder() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Material Build(void) override;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual MaterialBuilder& FromConfiguration(
        const LibConfig::Setting& config
    ) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetName(const std::string& name);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetBaseColor(const Vec3f& color);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetOpacity(float opacity);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetAlphaMode(Material::AlphaMode mode);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetAlphaCutoff(float cutoff);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetEmission(const Vec3f& emission);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetMetallic(float metallic);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetRoughness(float roughness);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetSubsurface(float subsurface);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetSpecularTint(float tint);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetAnisotropic(float anisotropic);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetSheen(float sheen);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetSheenTint(float tint);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetClearcoat(float clearcoat);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetClearcoatGloss(float gloss);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetSpecTrans(float specTrans);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetIOR(float ior);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetMediumType(Material::MediumType type);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetMediumDensity(float density);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetMediumColor(const Vec3f& color);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetMediumAnisotropy(float anisotropy);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetAlbedoTexturePath(const Path& path);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetMetallicRoughnessTexturePath(const Path& path);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetNormalTexturePath(const Path& path);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    MaterialBuilder& SetEmissionTexturePath(const Path& path);
};

} // namespace Ray
