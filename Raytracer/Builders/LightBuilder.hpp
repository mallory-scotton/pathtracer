///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"
#include "Builders/IBuilder.hpp"
#include "Components/Light.hpp"
#include "Utils/LibConfig.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class LightBuilder : public IBuilder<Light>
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~LightBuilder() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual Light Build(void) override;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual LightBuilder& FromConfiguration(
        const LibConfig::Setting& config
    ) override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    LightBuilder& SetType(Light::Type type);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    LightBuilder& SetPosition(const Vec3f& pos);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    LightBuilder& SetEmission(const Vec3f& emission);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    LightBuilder& SetRadius(float radius);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    LightBuilder& SetV1(const Vec3f& v1);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    LightBuilder& SetV2(const Vec3f& v2);

};

} // namespace Ray
