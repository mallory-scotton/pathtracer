///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Maths/Utils.hpp"
#include "Maths/Vec3.hpp"
#include <float.h>

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Camera
{
public:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Vec3f position;         //<!
    Vec3f up;               //<!
    Vec3f right;            //<!
    Vec3f forward;          //<!

    float focalDist;        //<!
    float aperture;         //<!
    float fov;              //<!
    bool isMoving;          //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Vec3f worldUp;          //<!
    Vec3f pivot;            //<!

    float pitch;            //<!
    float radius;           //<!
    float yaw;              //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param eye
    /// \param lookat
    /// \param fov
    ///
    ///////////////////////////////////////////////////////////////////////////
    Camera(Vec3f eye, Vec3f lookat, float fov);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    Camera(const Camera& other);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Camera& operator=(const Camera& other);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param dx
    /// \param dy
    ///
    ///////////////////////////////////////////////////////////////////////////
    void OffsetOrientation(float dx, float dy);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param dx
    /// \param dy
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Strafe(float dx, float dy);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param dr
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetRadius(float dr);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param view
    /// \param projection
    /// \param ratio
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ComputeViewProjectionMatrix(
        float* view,
        float* projection,
        float ratio
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param val
    ///
    ///////////////////////////////////////////////////////////////////////////
    void SetFov(float val);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void UpdateCamera(void);
};

}  // namespace Ray
