///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Factories/AFactory.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
template <typename T>
AFactory<T>& AFactory<T>::Register(
    const String& name,
    const typename IFactory<T>::Constructor& constructor
)
{
    if (!HasConstructor(name))
    {
        m_constructors[name] = constructor;
    }

    return (*this);
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
bool AFactory<T>::HasConstructor(const String& name) const
{
    for (const auto& [key, value] : m_constructors)
    {
        if (key == name)
        {
            return (true);
        }
    }

    return (false);
}

///////////////////////////////////////////////////////////////////////////////
template <typename T>
Optional<UniquePtr<T>> AFactory<T>::Create(
    const String& name,
    const Optional<LibConfig::Setting>& config
) const
{
    if (!HasConstructor(name))
    {
        return (std::nullopt);
    }
    return (m_constructors.at(name)(config));
}

} // namespace Ray
