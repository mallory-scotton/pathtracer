///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"
#include "Maths/Vec2.hpp"
#include "Maths/Vec3.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Shader
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    static const Path INCLUDE_PATH;                 //<!
    static const Regex INCLUDE_REGEX;               //<!
    static const Regex COMMENT_SINGLE_LINE_REGEX;   //<!
    static const Regex COMMENT_MULTI_LINE_REGEX;    //<!
    static const Regex MULTIPLE_BLANK_LINE_REGEX;   //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    GLuint m_object;        //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param source
    /// \param shaderType
    ///
    ///////////////////////////////////////////////////////////////////////////
    Shader(const String& source, GLuint shaderType);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param vertexSource
    /// \param fragmentSource
    ///
    ///////////////////////////////////////////////////////////////////////////
    Shader(const String& vertexSource, const String& fragmentSource);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Shader();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param objects
    ///
    ///////////////////////////////////////////////////////////////////////////
    void CompileProgram(const Vector<GLuint>& objects);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    GLuint GetObject(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Use(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void StopUsing(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param uniform
    /// \param data
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Uniform(const String& uniform, int data);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param uniform
    /// \param data
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Uniform(const String& uniform, float data);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param uniform
    /// \param data
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Uniform(const String& uniform, const Vec2f& data);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param uniform
    /// \param data
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Uniform(const String& uniform, const Vec2i& data);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param uniform
    /// \param data
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Uniform(const String& uniform, const Vec3f& data);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param uniform
    /// \param data
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Uniform(const String& uniform, const Vec3i& data);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param content
    /// \param includedFiles
    /// \param currentDir
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static String ProcessIncludes(
        const String& content,
        UnorderedSet<Path>& includedFiles,
        const Path& currentDir
    );

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param content
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static String RemoveComments(const String& content);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param filePath
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static String ReadFile(const Path& filePath);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param source
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static GLuint CompileShader(const String& source, GLuint shaderType);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param filePath
    ///
    ///////////////////////////////////////////////////////////////////////////
    static String Source(const Path& filePath);
};

} // namespace Ray
