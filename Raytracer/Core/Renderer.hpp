///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"
#include "Core/Quad.hpp"
#include "Core/Shader.hpp"
#include "Maths/Vec2.hpp"
#include "Maths/Vec3.hpp"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
class Scene;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Renderer
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class Options
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        //
        ///////////////////////////////////////////////////////////////////////
        Vec2i renderResolution;             //<!
        Vec2i windowResolution;             //<!
        Vec3f uniformLightCol;              //<!
        Vec3f backgroundCol;                //<!
        int tileWidth;                      //<!
        int tileHeight;                     //<!
        int maxDepth;                       //<!
        int maxSpp;                         //<!
        int RRDepth;                        //<!
        int texArrayWidth;                  //<!
        int texArrayHeight;                 //<!
        int denoiserFrameCnt;               //<!
        bool enableRR;                      //<!
        bool enableDenoiser;                //<!
        bool enableTonemap;                 //<!
        bool enableAces;                    //<!
        bool simpleAcesFit;                 //<!
        bool openglNormalMap;               //<!
        bool enableEnvMap;                  //<!
        bool enableUniformLight;            //<!
        bool hideEmitters;                  //<!
        bool enableBackground;              //<!
        bool transparentBackground;         //<!
        bool independentRenderSize;         //<!
        bool enableRoughnessMollification;  //<!
        bool enableVolumeMIS;               //<!
        float envMapIntensity;              //<!
        float envMapRot;                    //<!
        float roughnessMollificationAmt;    //<!

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        Options(void);
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Scene* scene;
    Quad* quad;

    // Opengl buffer objects and textures for storing scene data on the GPU
    GLuint BVHBuffer;
    GLuint BVHTex;
    GLuint vertexIndicesBuffer;
    GLuint vertexIndicesTex;
    GLuint verticesBuffer;
    GLuint verticesTex;
    GLuint normalsBuffer;
    GLuint normalsTex;
    GLuint materialsTex;
    GLuint transformsTex;
    GLuint lightsTex;
    GLuint textureMapsArrayTex;
    GLuint envMapTex;
    GLuint envMapCDFTex;

    // FBOs
    GLuint pathTraceFBO;
    GLuint pathTraceFBOLowRes;
    GLuint accumFBO;
    GLuint outputFBO;

    // Shaders
    String shadersDirectory;
    UniquePtr<Shader> pathTraceShader;
    UniquePtr<Shader> pathTraceShaderLowRes;
    UniquePtr<Shader> outputShader;
    UniquePtr<Shader> tonemapShader;

    // Render textures
    GLuint pathTraceTextureLowRes;
    GLuint pathTraceTexture;
    GLuint accumTexture;
    GLuint tileOutputTexture[2];
    GLuint denoisedTexture;

    // Render resolution and window resolution
    Vec2i renderSize;
    Vec2i windowSize;

    // Variables to track rendering status
    Vec2i tile;
    Vec2i numTiles;
    Vec2f invNumTiles;
    int tileWidth;
    int tileHeight;
    int currentBuffer;
    int frameCounter;
    int sampleCounter;
    float pixelRatio;

    // Denoiser output
    Vec3f* denoiserInputFramePtr;
    Vec3f* frameOutputPtr;
    bool denoised;

    bool initialized;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Renderer(Scene* scene, const std::string& shadersDirectory);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~Renderer();

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitGPUDataBuffers(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitFBOs(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitShaders(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitializeUniforms(UniquePtr<Shader>& shader);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ResizeRenderer(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ReloadShaders(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Render(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Present(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param secondsElasped
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(float secondsElapsed);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    float GetProgress(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int GetSampleCount(void);
};

} // namespace Ray
