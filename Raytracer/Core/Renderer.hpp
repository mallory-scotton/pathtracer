///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "Config.hpp"
#include "Core/Quad.hpp"
#include "Core/Shader.hpp"
#include "Maths/Vec2.hpp"
#include "Maths/Vec3.hpp"

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
#define RENDERER_ENABLE_ENVMAP          "OPT_ENVMAP"
#define RENDERER_ENABLE_LIGHTS          "OPT_LIGHTS"
#define RENDERER_ENABLE_RR              "OPT_RR"
#define RENDERER_OPTIONS_RRDEPTH        "OPT_RR_DEPTH "
#define RENDERER_ENABLE_UNIFORM         "OPT_UNIFORM_LIGHT"
#define RENDERER_ENABLE_OPENGLNORMAL    "OPT_OPENGL_NORMALMAP"
#define RENDERER_ENABLE_HIDEEMITTERS    "OPT_HIDE_EMITTERS"
#define RENDERER_ENABLE_BACKGROUND      "OPT_BACKGROUND"
#define RENDERER_ENABLE_TRANSPARENT_BG  "OPT_TRANSPARENT_BACKGROUND"
#define RENDERER_ENABLE_ALPHA_TEST      "OPT_ALPHA_TEST"
#define RENDERER_ENABLE_ROUGHNESS_MOLL  "OPT_ROUGHNESS_MOLLIFICATION"
#define RENDERER_ENABLE_MEDIUM          "OPT_MEDIUM"
#define RENDERER_ENABLE_VOLUME_MIS      "OPT_VOL_MIS"

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
#define DEFINE_OPTIONS(_OPTION) "#define " _OPTION "\n"

///////////////////////////////////////////////////////////////////////////////
// Namespace Ray
///////////////////////////////////////////////////////////////////////////////
namespace Ray
{

///////////////////////////////////////////////////////////////////////////////
//
///////////////////////////////////////////////////////////////////////////////
class Scene;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Renderer
{
public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    class Options
    {
    public:
        ///////////////////////////////////////////////////////////////////////
        //
        ///////////////////////////////////////////////////////////////////////
        Vec2i renderResolution;             //<!
        Vec2i windowResolution;             //<!
        Vec3f uniformLightCol;              //<!
        Vec3f backgroundCol;                //<!
        int tileWidth;                      //<!
        int tileHeight;                     //<!
        int maxDepth;                       //<!
        int maxSpp;                         //<!
        int RRDepth;                        //<!
        int texArrayWidth;                  //<!
        int texArrayHeight;                 //<!
        int denoiserFrameCnt;               //<!
        bool enableRR;                      //<!
        bool enableDenoiser;                //<!
        bool enableTonemap;                 //<!
        bool enableAces;                    //<!
        bool simpleAcesFit;                 //<!
        bool openglNormalMap;               //<!
        bool enableEnvMap;                  //<!
        bool enableUniformLight;            //<!
        bool hideEmitters;                  //<!
        bool enableBackground;              //<!
        bool transparentBackground;         //<!
        bool independentRenderSize;         //<!
        bool enableRoughnessMollification;  //<!
        bool enableVolumeMIS;               //<!
        float envMapIntensity;              //<!
        float envMapRot;                    //<!
        float roughnessMollificationAmt;    //<!

    public:
        ///////////////////////////////////////////////////////////////////////
        /// \brief
        ///
        ///////////////////////////////////////////////////////////////////////
        Options(void);
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Quad quad;                                              //<!

    UniquePtr<OpenGL::Buffer> BVHBuffer;                    //<!
    UniquePtr<OpenGL::TextureBuffer> BVHTex;                //<!
    UniquePtr<OpenGL::Buffer> vertexIndicesBuffer;          //<!
    UniquePtr<OpenGL::TextureBuffer> vertexIndicesTex;      //<!
    UniquePtr<OpenGL::Buffer> verticesBuffer;               //<!
    UniquePtr<OpenGL::TextureBuffer> verticesTex;           //<!
    UniquePtr<OpenGL::Buffer> normalsBuffer;                //<!
    UniquePtr<OpenGL::TextureBuffer> normalsTex;            //<!
    UniquePtr<OpenGL::Texture2D> materialsTex;              //<!
    UniquePtr<OpenGL::Texture2D> transformsTex;             //<!
    UniquePtr<OpenGL::Texture2D> lightsTex;                 //<!
    UniquePtr<OpenGL::Texture2DArray> textureMapsArrayTex;  //<!
    UniquePtr<OpenGL::Texture2D> envMapTex;                 //<!
    UniquePtr<OpenGL::Texture2D> envMapCDFTex;              //<!

    UniquePtr<OpenGL::FrameBuffer> pathTraceFBO;            //<!
    UniquePtr<OpenGL::FrameBuffer> pathTraceFBOLowRes;      //<!
    UniquePtr<OpenGL::FrameBuffer> accumFBO;                //<!
    UniquePtr<OpenGL::FrameBuffer> outputFBO;               //<!

    UniquePtr<Shader> pathTraceShader;                      //<!
    UniquePtr<Shader> pathTraceShaderLowRes;                //<!
    UniquePtr<Shader> outputShader;                         //<!
    UniquePtr<Shader> tonemapShader;                        //<!

    UniquePtr<OpenGL::Texture2D> pathTraceTextureLowRes;    //<!
    UniquePtr<OpenGL::Texture2D> pathTraceTexture;          //<!
    UniquePtr<OpenGL::Texture2D> accumTexture;              //<!
    UniquePtr<OpenGL::Texture2D> tileOutputTexture[2];      //<!
    UniquePtr<OpenGL::Texture2D> denoisedTexture;           //<!

    Vec2i renderSize;                                       //<!
    Vec2i windowSize;                                       //<!

    Vec2i tile;                                             //<!
    Vec2i numTiles;                                         //<!
    Vec2f invNumTiles;                                      //<!
    int tileWidth;                                          //<!
    int tileHeight;                                         //<!
    int currentBuffer;                                      //<!
    int frameCounter;                                       //<!
    int sampleCounter;                                      //<!
    float pixelRatio;                                       //<!

    Vector<Vec3f> denoiserInputFramePtr;                    //<!
    Vector<Vec3f> frameOutputPtr;                           //<!
    bool denoised;                                          //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Renderer(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~Renderer() = default;

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param source
    /// \param defines
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void InsertDefinitions(String& source, const String& defines);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ActivateTextures(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitGPUDataBuffers(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitFBOs(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String GetPathtraceShaderOptions(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String GetTonemapShaderOptions(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitShaders(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param shader
    ///
    ///////////////////////////////////////////////////////////////////////////
    void InitializeUniforms(UniquePtr<Shader>& shader);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void UpdateUniforms(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void UpdateSceneInstance(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void UpdateEnvMap(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void DenoiseRender(void);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ResizeRenderer(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ReloadShaders(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Render(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Present(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param secondsElasped
    ///
    ///////////////////////////////////////////////////////////////////////////
    void Update(float secondsElapsed);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    float GetProgress(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    int GetSampleCount(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param destination
    ///
    ///////////////////////////////////////////////////////////////////////////
    void ExportRender(const Path& destination);
};

} // namespace Ray
